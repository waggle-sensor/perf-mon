- name: Provision 
  hosts: test_node
  become: true
  gather_facts: no

  vars:
    k3s_namespace: perf-mon
    scrape_interval: 15s
    k3s_cluster_cidr: "10.31.0.0/16"
    k3s_service_cidr: "10.32.0.0/16"
    mimir_url: "http://mimir-nginx.{{ k3s_namespace }}.svc:80/api/v1/push"

  tasks:
  - name: install helpful tools
    ansible.builtin.apt:
      update_cache: yes
      pkg:
      - curl
      - python3-pip

  - name: Upgrade pip
    shell: pip3 install -U pip

  - name: Install Python packages
    shell: pip3 install openshift pyyaml kubernetes --user

  - name: Install K3s via curl
    shell: curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.25.4+k3s1 INSTALL_K3S_SKIP_ENABLE=true K3S_AGENT_TOKEN=4tX0DUZ0uQknRtVUAKjt sh -
    args:
      executable: /bin/bash

  - name: Get k3s version
    command: k3s --version
    register: k3s_version_output
    changed_when: false
    ignore_errors: true

  - name: Print k3s version
    debug:
      msg: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

  - name: Install Helm chart
    shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    args:
      executable: /bin/bash
  
  - name: Ensure k3s systemd is in running state
    service:
      name: k3s
      state: started
    register: k3sDetails
    until: k3sDetails.status.ActiveState == "active"
    retries: 10
    delay: 5

  - name: Create directory .kube
    when: ansible_user is defined
    file:
      path: ~{{ ansible_user }}/.kube
      state: directory
      owner: "{{ ansible_user }}"
      mode: "u=rwx,g=rx,o="

  - name: Copy config file to user home directory
    when: ansible_user is defined
    copy:
      src: /etc/rancher/k3s/k3s.yaml
      dest: ~{{ ansible_user }}/.kube/config
      remote_src: true
      owner: "{{ ansible_user }}"
      mode: "u=rw,g=,o="

  - name: Configure default KUBECONFIG for user
    when: ansible_user is defined
    lineinfile:
     path: ~{{ ansible_user }}/.bashrc
     regexp: 'export KUBECONFIG=~/.kube/config'
     line: 'export KUBECONFIG=~/.kube/config # Added by k3s-ansible'
     state: present

  - name: Create our namespace in Kubernetes
    k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      name: "{{ k3s_namespace }}"
      api_version: v1
      kind: Namespace
      state: present

  - name: Download Grafana CRDs
    shell: wget -P /tmp/ 'https://raw.githubusercontent.com/grafana/agent/main/operations/agent-static-operator/crds/{{ item }}'; kubectl apply -f /tmp/{{ item }}
    with_items:
    - monitoring.coreos.com_podmonitors.yaml  
    - monitoring.coreos.com_probes.yaml
    - monitoring.coreos.com_servicemonitors.yaml
    - monitoring.grafana.com_grafanaagents.yaml
    - monitoring.grafana.com_integrations.yaml
    - monitoring.grafana.com_logsinstances.yaml
    - monitoring.grafana.com_metricsinstances.yaml
    - monitoring.grafana.com_podlogs.yaml
  
  - name: Get Node Name
    shell: "kubectl get node"
    register: node_name

  # required for jetson-exporter
  - name: Label GPU
    shell: "kubectl label nodes {{ node_name.stdout_lines[1].split(' ')[0] }} resource.gpu=true"

  - name: Add grafana mimir to Helm chart
    shell: "helm repo add grafana https://grafana.github.io/helm-charts"
    timeout: 120

  - name: Update Helm Repos
    shell: "helm repo update"

  - name: Ensure Grafana mimir isn't installed
    shell: "helm -n {{ k3s_namespace }} uninstall --ignore-not-found mimir"
    environment:
      KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"

  - name: Deploy Grafana mimir in Kubernetes
    shell: "helm -n {{ k3s_namespace }} install mimir grafana/mimir-distributed"
    environment:
      KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
  
  - name: Deploy Jetson Exporter in Kubernetes
    k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      namespace: "{{ k3s_namespace }}"
      definition: "{{ lookup('template', 'kubernetes/jetson-exporter.yaml') | from_yaml_all }}"

  - name: Create ConfigMap for Grafana dashboard
    k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      namespace: "{{ k3s_namespace }}"
      definition: "{{ lookup('template', 'kubernetes/grafana-config-datasources.yaml.j2') | from_yaml_all }}"

  - name: Deploy Grafana dashboard
    k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      namespace: "{{ k3s_namespace }}"
      definition: "{{ lookup('file', 'kubernetes/grafana.yaml') | from_yaml_all }}"

  - name: Install Grafana operator
    k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      namespace: "{{ k3s_namespace }}"
      definition: "{{ lookup('template', 'kubernetes/grafana-operator.yaml.j2') | from_yaml_all }}"

  - name: Install Grafana agent
    k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      namespace: "{{ k3s_namespace }}"
      definition: "{{ lookup('template', 'kubernetes/grafana-agent.yaml.j2') | from_yaml_all }}"

  - name: Deploy Grafana operator scrapers
    k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      namespace: "{{ k3s_namespace }}"
      definition: "{{ lookup('template', 'kubernetes/grafana-operator-scrape.yaml.j2') | from_yaml_all }}"

  - name: Install nvidia container toolkit
    shell: curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | tee /etc/apt/sources.list.d/nvidia-container-toolkit.list; apt-get update; apt-get install -y nvidia-container-toolkit

  - name: Set nvidia runtime
    k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      namespace: "{{ k3s_namespace }}"
      definition: "{{ lookup('template', 'kubernetes/set-nvidia-runtime.yaml') | from_yaml_all }}"
